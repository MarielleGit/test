{
	"info": {
		"_postman_id": "9fb911eb-9598-44bf-a2a1-202fb558dc53",
		"name": "OpenChargeMap API Tests - Station POIs & Reference Data",
		"description": "Postman collection to validate Open Charge Map API endpoints: /v3/poi/ and /v3/referencedata/.  \nCovers status code, response time, schema checks, and business logic.  \nAuthor: Marielle Matos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33173976",
		"_collection_link": "https://www.postman.com/workspace/My-Workspace~a9034eeb-3930-4d5c-8a40-48c3a1b820c8/collection/33173976-9fb911eb-9598-44bf-a2a1-202fb558dc53?action=share&source=collection_link&creator=33173976"
	},
	"item": [
		{
			"name": "1) Get POIs (exactly 5 within 10km of London)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Ensure defaults if not set",
							"pm.collectionVariables.set('baseUrl', pm.collectionVariables.get('baseUrl') || 'https://api.openchargemap.io/v3');",
							"pm.collectionVariables.set('lat', pm.collectionVariables.get('lat') || '51.5074');",
							"pm.collectionVariables.set('lon', pm.collectionVariables.get('lon') || '0.1278');",
							"pm.collectionVariables.set('distance', pm.collectionVariables.get('distance') || '10');",
							"pm.collectionVariables.set('maxresults', pm.collectionVariables.get('maxresults') || '5');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --- Basic checks",
							"pm.test('Status code is 200', function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response time < 1000ms', function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// --- Parse JSON",
							"let data;",
							"pm.test('Response is valid JSON array', function () {",
							"  data = pm.response.json();",
							"  pm.expect(data).to.be.an('array');",
							"});",
							"",
							"// --- Business rule: exactly 5 results",
							"pm.test('Returns exactly maxresults items', function () {",
							"  const expected = parseInt(pm.collectionVariables.get('maxresults'), 10);",
							"  pm.expect(data.length).to.eql(expected);",
							"});",
							"",
							"// --- Schema checks for each POI",
							"pm.test('Each POI has required fields', function () {",
							"  data.forEach((poi, idx) => {",
							"    pm.expect(poi).to.have.property('ID');",
							"    pm.expect(poi).to.have.property('AddressInfo');",
							"    pm.expect(poi.AddressInfo).to.be.an('object');",
							"    pm.expect(poi.AddressInfo).to.have.property('Latitude');",
							"    pm.expect(poi.AddressInfo).to.have.property('Longitude');",
							"    pm.expect(poi).to.have.property('NumberOfPoints');",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "9bb03e5b-0fb2-4916-9b2b-26c6bd27a56a",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/poi/?latitude={{lat}}&longitude={{lon}}&distance={{distance}}&maxresults={{maxresults}}&key={{api_key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"poi",
						""
					],
					"query": [
						{
							"key": "latitude",
							"value": "{{lat}}"
						},
						{
							"key": "longitude",
							"value": "{{lon}}"
						},
						{
							"key": "distance",
							"value": "{{distance}}"
						},
						{
							"key": "maxresults",
							"value": "{{maxresults}}"
						},
						{
							"key": "key",
							"value": "{{api_key}}"
						}
					]
				},
				"description": "Returns a list of POIs around given coordinates. Business rules: exactly 5 results and all within 10km."
			},
			"response": []
		},
		{
			"name": "2) Get Reference Data (ChargerTypes & StatusTypes)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// a. Response Time and Status Code: ",
							"",
							"pm.test('Status code is 200', function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response time < 1000ms', function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// b. Schema Validation:",
							"",
							"const body = pm.response.json();",
							"pm.test('Has expected reference arrays', function () {",
							"  pm.expect(body).to.be.an('object');",
							"  pm.expect(body).to.have.property('ChargerTypes');",
							"  pm.expect(body).to.have.property('StatusTypes');",
							"  pm.expect(body.ChargerTypes).to.be.an('array');",
							"  pm.expect(body.StatusTypes).to.be.an('array');",
							"});",
							"",
							"pm.test('ChargerTypes items have ID & Title', function () {",
							"  body.ChargerTypes.forEach((it) => {",
							"    pm.expect(it).to.have.property('ID');",
							"    pm.expect(it).to.have.property('Title');",
							"  });",
							"});",
							"",
							"pm.test('StatusTypes items have ID & Title', function () {",
							"  body.StatusTypes.forEach((it) => {",
							"    pm.expect(it).to.have.property('ID');",
							"    pm.expect(it).to.have.property('Title');",
							"  });",
							"});",
							"",
							"// c. Business Logic: ",
							"",
							"pm.test('ChargerTypes includes Fast and Slow', function () {",
							"  const titles = body.ChargerTypes.map(it => String(it.Title).toLowerCase());",
							"  pm.expect(titles.some(t => t.includes('fast'))).to.eql(true);",
							"  pm.expect(titles.some(t => t.includes('slow'))).to.eql(true);",
							"});",
							"",
							"pm.test('StatusTypes have unique IDs', function () {",
							"  const ids = body.StatusTypes.map(it => it.ID);",
							"  const unique = new Set(ids);",
							"  pm.expect(unique.size).to.eql(ids.length);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('baseUrl', pm.collectionVariables.get('baseUrl') || 'https://api.openchargemap.io/v3');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "{{Key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/referencedata/?key={{api_key}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"referencedata",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{api_key}}"
						}
					]
				},
				"description": "Returns reference datasets (e.g., ChargerTypes, StatusTypes). Business rules: ChargerTypes contains Fast & Slow; StatusTypes have unique IDs."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "9bb03e5b-0fb2-4916-9b2b-26c6bd27a56a",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.openchargemap.io/v3"
		},
		{
			"key": "api_key",
			"value": ""
		},
		{
			"key": "lat",
			"value": "51.5074"
		},
		{
			"key": "lon",
			"value": "0.1278"
		},
		{
			"key": "distance",
			"value": "10"
		},
		{
			"key": "maxresults",
			"value": "5"
		}
	]
}